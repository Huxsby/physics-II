Global
    - Trabajar siempre en radians y nunca en grados, dejar estos para la toma de datos y castearlos enseguida a radians.

class_datos.py
    - Terminar implementación del tipo 'cordenadas_exponenciales'. ¿Es necesario usar el nuevo tipo de dato 'cordenadas_exponenciales'?
    - Normalizar vector eje en la toma general de datos, dar la opcion de elegir entre ['x','y','z','g'] -> 'g' Irse por 'vector'
        - Cambiar en ejercicios.py

class_robot_structure.py
    - Optimizar (si se puede hacer): self.ejes_helicoidales = self.get_ejes_helicoidales()

ejercicio.py
!   - Queda por implementar encontrar T con los datos del robot y una lista generada de angulos.

T4
    - Configuraciones singulares.

P1
    [X] - Crear archivo .yaml para el brazo del laboratorio.


    - Desarrolla un código en Python que genere las gráficas correspondientes a los
    elipsoides de manipulabilidad y de fuerza para una configuración singular del robot
    2R plano y para las configuraciones con coordenadas de articulaciones (0,π/4)y
    (0,3π/4).

        - Cabiar nombre de antisimetrica() -> VecToso3sp o parecido.

P2  7. Ejercicios prácticos
     [] 7.1 Matriz jacobiana
     [] 7.2 Configuraciones singulares (Preparar codigo para experimentar con el robot como se indica en la práctica)
     [] 7.3 Elipsoides de Manipulabilidad y Fuerza (Generalizar el código)
     [] 7.4 Cinemática Inversa

# Info.

Ejes helicoidales en problema_cinematico_directo.py (P1):
[array([0., 0., 1., 0., 0., 0.]), array([ 0.   , -1.   ,  0.   ,  0.183,  0.   , -0.   ]), array([ 0.   , -1.   ,  0.   ,  0.393,  0.   , -0.   ]), array([1.   , 0.   , 0.   , 0.   , 0.423, 0.   ]), array([ 0.    , -1.    ,  0.    ,  0.423 ,  0.    , -0.2215]), array([1.    , 0.    , 0.    , 0.    , 0.4175, 0.    ])]
vs: [array([0., 0., 0.]), array([ 0.183,  0.   , -0.   ]), array([ 0.393,  0.   , -0.   ]), array([0.   , 0.423, 0.   ]), array([ 0.423 ,  0.    , -0.2215]), array([0.    , 0.4175, 0.    ])]
ws: [array([0, 0, 1]), array([ 0, -1,  0]), array([ 0, -1,  0]), array([1, 0, 0]), array([ 0, -1,  0]), array([1, 0, 0])]

Ejes helicoidales con .yalm del robot niryo_one:
[array([ 0.,  0.,  1., -0., -0., -0.]), array([ 0.   , -1.   ,  0.   ,  0.183, -0.   , -0.   ]), array([ 0.   , -1.   ,  0.   ,  0.393, -0.   , -0.   ]), array([ 1.   ,  0.   ,  0.   , -0.   ,  0.423, -0.   ]), array([ 0.    , -1.    ,  0.    ,  0.423 , -0.    , -0.2215]), array([ 1.    ,  0.    ,  0.    , -0.    ,  0.4175, -0.    ])]

Ejes helicoidales en calcular_jacobiana():
[array([ 0.,  0.,  1., -0., -0., -0.]), array([ 0.   , -1.   ,  0.   ,  0.183, -0.   , -0.   ]), array([ 0.   , -1.   ,  0.   ,  0.393, -0.   , -0.   ]), array([ 1.   ,  0.   ,  0.   , -0.   ,  0.423, -0.   ]), array([ 0.    , -1.    ,  0.    ,  0.423 , -0.    , -0.2215]), array([ 1.    ,  0.    ,  0.    , -0.    ,  0.4175, -0.    ])]

Ejes helicoidales en jacobian.py (P2):
[[0,0,1,0,0,0], Monstruosidad simbólica] *Nota Si es Ji, los vectores están en columnas.
Dados t = 0: 
( [0, 0, 1, 0, 0, 0],                           [0, -1, 0, 0.183, 0, 0],                                [0, -1, 0, 0.393, 0, 0],                                [1, 0, 0, 0, 0.423, 0],                                 [0, -1, 0, 0.423, 0, -0.2215],                                  [1, 0, 0, 0, 0.4175, 0] )


vs: [Monstruosidad simbólica]
ws: [Monstruosidad simbólica]